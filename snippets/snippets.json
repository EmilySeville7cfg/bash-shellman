{
	"bash": {
    "prefix": "bash",
    "body": "#!/usr/bin/env ${1|bash,node,perl,php,python,python3,ruby|}\n\n",
    "description": "bash shebang"
  },
  "summary": {
    "prefix": "summary",
    "body": [
      "# Title:         ${1:title}",
      "# Description:   ${2:description}",
      "# Author:        ${3:author <email>}",
      "# Date:          ${4:yyyy-mm-dd}",
      "# Version:       ${5:1.0.0}\n"
    ],
    "description": "Script summary"
  },
  "function": {
    "prefix": "func",
    "body": [
      "function ${1:name} () {",
      "\t${2:echo \"\\$1\" # arguments are accessible through $1, $2,...}",
      "}\n"
    ],
    "description": "function"
  },
  "function_args_count": {
    "prefix": "func args count",
    "body": "echo $#",
    "description": "number of function arguments"
  },
  "function_args": {
    "prefix": "func args",
    "body": "echo \"$@\"",
    "description": "function arguments array"
  },
  "function_return_value": {
    "prefix": "func ret val",
    "body": "echo \"$?\"",
    "description": "last function/command return code"
  },
  "cmd": {
    "prefix": "cmd",
    "body": "`${1:command}`",
    "description": "run command (command substitution)"
  },
  "cmd_success_check": {
    "prefix": "cmd success check",
    "body": [
      "if [[ \\$? == 0 ]]; then",
      "\t${3:echo command succeed}",
      "fi\n"
    ],
    "description": "check if last command succeed"
  },
  "cmd_failure_check": {
    "prefix": "cmd failure check",
    "body": [
      "if [[ \\$? != 0 ]]; then",
      "\t${3:echo command failed}",
      "fi\n"
    ],
    "description": "check if last command failed"
  },
  "assign_array": {
    "prefix": "assign array",
    "body": "newArray=(\"${1:Element 1}\" \"${2:Element 2}\")\n",
    "description": "assign elements to an array"
  },
  "assign_if_empty": {
    "prefix": "assign if empty",
    "body": ": \"\\${${1:variable}:=${2:default}}\"",
    "description": "assign default to variable if variable is empty or null"
  },
  "ask_question": {
    "prefix": "ask question",
    "body": [
      "read -ep \"${1:Question here? }\" -i ${2:Default answer} ANSWER",
      "${3:echo \"\\$ANSWER\"}\n"
    ],
    "description": "Ask question with default answer"
  },
  "directory_create": {
    "prefix": "directory create",
    "body": "mkdir ${1:dirname}",
    "description": "create directory"
  },
  "directory_create_nested": {
    "prefix": "directory create nested",
    "body": "mkdir -p ${1:parent dir}/${2:child dir}",
    "description": "create nested directories"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if [ ${1:condition} ]; then",
      "\t${2: # body}",
      "elif [ ${3:condition} ]; then",
      "\t${4: # body}",
      "else",
      "\t${5: # body}",
      "fi\n"
    ],
    "description": "if"
  },
  "iff": {
    "prefix": "iff",
    "body": "[ ${1:condition} ] && ${2:command}\n",
    "description": "if condition is true then run command (short circuit)"
  },
  "iff_not": {
    "prefix": "iff not",
    "body": "[ ${1:condition} ] || ${2:command}\n",
    "description": "if condition is false then run command (short circuit)"
  },
  "if_string_empty": {
    "prefix": "if string empty",
    "body": [
      "if [ -z \"\\$${1:string}\" ]; then",
      "\t${2:# body}",
      "fi\n"
    ],
    "description": "if string is empty"
  },
  "if_string_not_empty": {
    "prefix": "if string not empty",
    "body": [
      "if [ -n \"\\$${1:string}\" ]; then",
      "\t${2:# body}",
      "fi\n"
    ],
    "description": "if string is not empty"
  },
	"if_string_equal": {
    "prefix": ["if string =", "string equal"],
    "body": [
      "if [ \"\\$${1:string1}\" = \"\\$${2:string2}\" ]; then",
      "\t${3:# body}",
      "fi\n"
    ],
    "description": "if strings are equal"
  },
  "if_string_not_equal": {
    "prefix": ["if string !=", "string not equal"],
    "body": [
      "if [ \"\\$${1:string1}\" != \"\\$${2:string2}\" ]; then",
      "\t${3:# body}",
      "fi\n"
    ],
    "description": "if strings are not equal"
  },
  "string_length": {
		"prefix": "string length",
		"body": "length=\\${#${1:variable}}\n",
		"description": "length of string in characters"
	},
	"string_trim": {
		"prefix": "string trim",
		"body": "${1:trimmed}=`echo -e \"\\${${2:var}}\" |  sed -e 's/^[[:space:]]*//' | sed -e 's/[[:space:]]*\\$//'`",
		"description": "remove leading and trailing white space(s)"
	},
	"string_trim_left": {
		"prefix": "string trim left",
		"body": "${1:trimmed}=`echo -e \"\\${${2:var}}\" | sed -e 's/^[[:space:]]*//'`",
		"description": "remove leading white space(s)"
	},
	"string_trim_right": {
		"prefix": "string trim right",
		"body": "${1:trimmed}=`echo -e \"\\${${2:var}}\" | sed -e 's/[[:space:]]*$//'`",
		"description": "remove trailing white space(s)"
	},
	"string_trim_all": {
		"prefix": "string trim all",
		"body": "${1:trimmed}=`echo -e \"\\${${2:var}}\" | tr -d '[[:space:]]'`",
		"description": "remove all white space(s)"
	},
	"string_replace": {
		"prefix": "string replace",
		"body": "${1:replaced}=`echo -e \"\\${${2:var}}\" | sed -e 's/${3:find}/${4:replace}/g'`",
		"description": "find all occurrences of a substrings and replace them"
	},
	"string_reverse": {
		"prefix": "string reverse",
		"body": "reversed=`echo -e \"\\${${1:var}}\" | rev`",
		"description": "reverse string characters"
	},
	"string_to_lower": {
		"prefix": "string toLower",
		"body": "toLower=`echo -e \"\\${${1:var}}\" | tr '[:upper:]' '[:lower:]'`",
		"description": "convert string to lowercase"
	},
	"string_to_upper": {
		"prefix": "string toUpper",
		"body": "toUpper=`echo -e \"\\${${1:var}}\" | tr '[:lower:]' '[:upper:]'`",
		"description": "convert string to uppercase"
	},
	"string_substring": {
		"prefix": "string substring",
		"body": "substring=`echo -e \"\\${${1:var}:${2:offset}:${3:length}\"`",
		"description": "part of the string from offset with length characters"
	},
	"string_contains": {
    "prefix": ["string contains", "if string contains"],
    "body": [
      "if [[ \"\\$${1:string}\" = *${2:substring}* ]]; then",
      "\t${3:# body}",
      "fi\n"
    ],
    "description": "check whether string contains substring"
	},
	"string_index_of": {
		"prefix": "string indexOf",
		"body": [
			"temp=\\${${1:string}%%\"${2:substring}\"*} && indexOf=`echo \\${${1:string}%%\"${2:substring}\"*} | echo \\${#temp}`",
			"${0:# echo \\$indexOf}"
		],
		"description": "first index of substring in string"
	},
  "if_int_equal": {
    "prefix": "if int =",
    "body": [
      "if [[ \\$${1:int1} == \\$${2:int2} ]]; then",
      "\t${3:echo equal}",
      "fi\n"
    ],
    "description": "if integers are equal"
  },
  "if_int_not_equal": {
    "prefix": "if int !=",
    "body": [
      "if [[ \\$${1:int1} != \\$${2:int2} ]]; then",
      "\t${3:echo not equal}",
      "fi\n"
    ],
    "description": "if integers are not equal"
  },
  "if_int_greater": {
    "prefix": "if int >",
    "body": [
      "if [[ \\$${1:int} > \\$${2:val} ]]; then",
      "\t${3:echo greater}",
      "fi\n"
    ],
    "description": "if integer greater than value"
  },
  "if_int_greater_equal": {
    "prefix": "if int >=",
    "body": [
      "if [[ \\$${1:int} >= \\$${2:val} ]]; then",
      "\t${3:echo greater equal}",
      "fi\n"
    ],
    "description": "if integer greater than or equal value"
  },
  "if_int_less_than": {
    "prefix": "if int <",
    "body": [
      "if [[ \\$${1:int} > \\$${2:val} ]]; then",
      "\t${3:echo lesser}",
      "fi\n"
    ],
    "description": "if integer lesser than value"
  },
  "if_int_less_equal": {
    "prefix": "if int <=",
    "body": [
      "if [[ \\$${1:int} <= \\$${2:val} ]]; then",
      "\t${3:echo lesser equal}",
      "fi\n"
    ],
    "description": "if integer lesser than or equal value"
  },
  "if_cmd_exists": {
    "prefix": "if cmd exists",
    "body": [
      "if [ `command -v ${1:command}` ]; then",
      "\t${2:# body}",
      "fi\n"
    ],
    "description": "check if command exists"
  },
  "if_exists": {
    "prefix": "if exists",
    "body": [
      "if [ -e \"\\$${1:path}\"; then",
      "\t${0:echo exists}",
      "fi\n"
    ],
    "description": "if path exists (file, directory, link...)"
  },
  "if_file_exists": {
    "prefix": "if file exists",
    "body": [
      "if [ -f \"\\$${1:file}\" ]; then",
      "\t${2:echo file exists}",
      "fi\n"
    ],
    "description": "if file exists"
  },
  "if_file_not_empty": {
    "prefix": "if file not empty",
    "body": [
      "if [ -s \"\\$${1:file}\" ]; then",
      "\t${2:echo file not empty}",
      "fi\n"
    ],
    "description": "if file size is greater than zero"
  },
  "if_directory_exists": {
    "prefix": "if directory exists",
    "body": [
      "if [ -d \"\\$${1:directory}\" ]; then",
      "\t${0:echo directory exists}",
      "fi\n"
    ],
    "description": "if directory exists"
  },
  "if_file_readable": {
    "prefix": "if file readable",
    "body": [
      "if [ -r \"\\$${1:file}\" ]; then",
      "\t${0:echo file is readable}",
      "fi\n"
    ],
    "description": "if file readable"
  },
  "if_file_writeable": {
    "prefix": "if file writeable",
    "body": [
      "if [ -w \"\\$${1:file}\" ]; then",
      "\t${0:echo file is writeable}",
      "fi\n"
    ],
    "description": "if file writeable"
  },
  "if_file_executable": {
    "prefix": "if file executable",
    "body": [
    "if [ -x \"\\$${1:file}\" ]; then",
    "\t${0:echo file is executable}",
    "fi\n"
  ],
    "description": "if file executable"
  },
  "if_file_equal": {
    "prefix": "if file =",
    "body": [
      "if [ \"\\$${1:file1}\" -ef \"\\$${2:file2}\" ]; then",
      "\t${0:echo files are equal}",
      "fi\n"
    ],
    "description": "if files are equal"
  },
  "if_file_link": {
    "prefix": "if file link",
    "body": [
      "if [ -h \"\\$${1:file}\" ]; then",
      "\t${0:echo symbolic link}",
      "fi\n"
    ],
    "description": "if file exists and is a symbolic link"
  },
  "if_file_newer": {
    "prefix": "if file newer",
    "body": [
      "if [ \"\\$${1:file1}\" -nt \"\\$${2:file2}\" ]; then",
      "\t${0:echo file1 is newer than file2}",
      "fi\n"
    ],
    "description": "if file1 newer than file2"
  },
  "if_file_older": {
    "prefix": "if file older",
    "body": [
      "if [ \"\\$${1:file1}\" -ot \"\\$${2:file2}\" ]; then",
      "\t${0:echo file1 is older than file2}",
      "fi\n"
    ],
    "description": "if file1 older than file2"
  },
  "ips": {
    "prefix": "ips",
    "body": "IPS=`hostname -I`\n",
    "description": "Array of local IPs"
  },
  "ip_info": {
    "prefix": "ip info",
    "body": "echo `curl -s ipinfo.io/${1|ip,city,region,country,loc,postal,org|}`\n",
    "description": "public ip information"
  },
  "ip_public": {
    "prefix": "ip public",
    "body": "PUBLIC_IP=`curl -s ${1|bot.whatismyipaddress.com,ident.me,ipecho.net/plain,icanhazip.com,ifconfig.me,api.ipify.org,ipinfo.io/ip|}`\n",
    "description": "public ip address"
  },
  "for_i": {
    "prefix": "for i",
    "body": [
      "for((i=0;i<${1:n};i++)); do",
      "\t${0:echo \"\\$i\"}",
      "done\n"
    ],
    "description": "for loop by index"
  },
  "for_ij": {
    "prefix": "for ij",
    "body": [
      "for((i=0;i<${1:n};i++)); do",
      "\tfor((j=0;j<${2:m};j++)); do",
      "\t\t${0:echo \"\\$i, \\$j\"}",
      "\tdone",
      "done\n"
    ],
    "description": "for loop by index"
  },
  "for_in": {
    "prefix": "for in",
    "body": [
      "for ${1:item} in {${2:a..z}}; do",
      "\techo \"\\$${1:item}\"",
      "done\n"
    ],
    "description": "for loop in collection"
  },
  "for_in_column": {
    "prefix": "for in column",
    "body": [
      "for ${1:col} in `${2:docker images} | awk '{ print ${3:\\$1\":\"\\$2} }'`; do",
      "\t${4:echo \"\\$col\" | cut -d ':' -f 1}",
      "\t${5:echo \"\\$col\" | cut -d ':' -f 2}",
      "done\n"
    ],
    "description": "for loop in collection"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while [ ${1:condition} ]; do",
      "\t${0:# body}",
      "done\n"
    ],
    "description": "while loop"
  },
  "until": {
    "prefix": "until",
    "body": [
      "until [ ${1:condition} ]; do",
      "\t${0:# body}",
      "done\n"
    ],
    "description": "until loop"
  },
  "switch": {
    "prefix": "switch case",
    "body": [
      "case \"\\$${1:item}\" in",
      "\t${2:1})",
      "\t\t${3:echo \"case 1\"}",
      "\t;;",
      "\t${4:2|3})",
      "\t\t${5:echo \"case 2 or 3\"}",
      "\t;;",
      "\t*)",
      "\t\t${6:echo \"default\"}",
      "\t;;",
      "esac\n"
    ],
    "description": "switch case"
  },
  "expr": {
    "prefix": "expr",
    "body": "expr ${0:2 * 3}",
    "description": "arithmetic operations"
  },
  "math": {
  "prefix": "math",
  "body": "\\$((${0:i++}))",
  "description": "Doing mathematical operations"
  },
  "file_read": {
    "prefix": "file read",
    "body": [
      "cat ${1:\"\\$filepath\"} | while read ${2:line}; do",
      "\t${3:echo \"\\$line\"}",
      "done\n"
    ],
    "description": "read a file"
  },
  "file_write": {
    "prefix": "file write",
    "body": [
      "echo ${1:\"file header\"} > ${2:\"\\$filepath\"}",
      "for ${3:line} in {${4:lines}}; do",
      "\techo \"\\$${3:line}\" >> ${2:\"\\$filepath\"}",
      "done\n"
    ],
    "description": "write a file"
  },
  "file_write_multiline": {
    "prefix": "file write multiline",
    "body": [
      "cat >${1:filepath} <<EOL",
      "# text here",
      "EOL"
    ],
    "description": "write multiple lines into file"
  },
  "file_write_multiline_sudo": {
    "prefix": "file write multiline sudo",
    "body": [
      "cat << EOL | sudo tee ${1:filepath}",
      "${0:# text here}",
      "EOL"
    ],
    "description": "write multiple lines into file with sudo permission"
  },
  "remove_files_older_than": {
    "prefix": "remove files older",
    "body": "find \"\\$${1:path}\" -mtime +${2:days} | xargs rm -f\n",
    "description": "find and remove files older than x days"
  },
  "color_black": {
    "prefix": "color black",
    "body": "echo `tput setaf 0`${0:black text}`tput sgr0`\n",
    "description": "write in black"
  },
  "color_red": {
    "prefix": "color red",
    "body": "echo `tput setaf 1`${0:red text}`tput sgr0`\n",
    "description": "write in red"
  },
  "color_green": {
    "prefix": "color green",
    "body": "echo `tput setaf 2`${0:green text}`tput sgr0`\n",
    "description": "write in green"
  },
  "color_yellow": {
    "prefix": "color yellow",
    "body": "echo `tput setaf 3`${0:yellow text}`tput sgr0`\n",
    "description": "write in yellow"
  },
  "color_blue": {
    "prefix": "color blue",
    "body": "echo `tput setaf 4`${0:blue text}`tput sgr0`\n",
    "description": "write in blue"
  },
  "color_magenta": {
    "prefix": "color magenta",
    "body": "echo `tput setaf 5`${0:magenta text}`tput sgr0`\n",
    "description": "write in magenta"
  },
  "color_cyan": {
    "prefix": "color cyan",
    "body": "echo `tput setaf 6`${0:cyan text}`tput sgr0`\n",
    "description": "write in cyan"
  },
  "color_white": {
    "prefix": "color white",
    "body": "echo `tput setaf 7`${0:white text}`tput sgr0`\n",
    "description": "write in white"
  },
  "format_bold": {
    "prefix": "format bold",
    "body": "echo `tput bold`${0:bold text}`tput sgr0`\n",
    "description": "write in bold"
  },
  "format_italic": {
    "prefix": "format italic",
    "body": "echo `tput sitm`${0:italic text}`tput sgr0`\n",
    "description": "write in italic"
  },
  "format_dim": {
    "prefix": "format dim",
    "body": "echo `tput dim`${0:dimmed text}`tput sgr0`\n",
    "description": "write in dim"
  },
  "format_reverse": {
    "prefix": "format reverse",
    "body": "echo `tput rev`${0:reversed text}`tput sgr0`\n",
    "description": "write in reverse"
  },
  "random_number": {
    "prefix": "random int",
    "body": "echo \\$((${1:min} + RANDOM % \\$((${2:max}-${1:min}))))\n",
    "description": "generate random integer x such as min < x < max"
  },
  "region": {
		"prefix": "region",
		"body": [
			"# >>>>>>>>>>>>>>>>>>>>>>>> ${1:name} >>>>>>>>>>>>>>>>>>>>>>>>",
			"$0",
			"# <<<<<<<<<<<<<<<<<<<<<<<< ${1:name} <<<<<<<<<<<<<<<<<<<<<<<<"
		],
		"description": "Comment out a special region (i.e. variable declrations"
	},
  "service_manage": {
    "prefix": "service manage",
    "body": "sudo systemctl ${1|enable,disable,start,stop,reload,restart,status|} ${2:service}\n",
    "description": "Manage service operations"
  },
  "stopwatch_start": {
    "prefix": "stopwatch start",
    "body": "STOPWATCH_START_TIME=\\$(date +%s)\n",
    "description": "start stopwatch"
  },
  "stopwatch_stop": {
    "prefix": "stopwatch stop",
    "body": "STOPWATCH_END_TIME=\\$(date +%s)\n",
    "description": "stop stopwatch"
  },
  "stopwatch_elapsed": {
    "prefix": "stopwatch elapsed",
    "body": [
      "STOPWATCH_ELAPSED_TOTAL_SECONDS=$((STOPWATCH_END_TIME - STOPWATCH_START_TIME))",
      "STOPWATCH_ELAPSED_MINUTES=$((STOPWATCH_ELAPSED_TOTAL_SECONDS / 60))",
      "STOPWATCH_ELAPSED_SECONDS=$((STOPWATCH_ELAPSED_TOTAL_SECONDS % 60))",
      "${1:echo elapsed \\$STOPWATCH_ELAPSED_MINUTES minutes and \\$STOPWATCH_ELAPSED_SECONDS seconds}\n"
    ],
    "description": "elapsed time"
  },
  "sleep": {
    "prefix": "sleep",
    "body": "sleep ${1:30}${2|s,m,h,d|}\n",
    "description": "sleep for a specified amount of time (s: second, m: minute, h: hour, d: day)"
  },
  "timeout": {
    "prefix": "timeout",
    "body": "timeout ${1:seconds} ${2:command}\n",
    "description": "Run command within a time frame"
  },
  "fn_banner_simple": {
    "prefix": "fn banner simple",
    "body": [
      "function banner_simple() {",
      "\tlocal msg=\"* \\$* *\"",
      "\tlocal edge=`echo \"\\$msg\" | sed 's/./*/g'`",
      "\techo \"\\$edge\"",
      "\techo \"`tput bold`\\$msg`tput sgr0`\"",
      "\techo \"\\$edge\"",
      "\techo",
      "}\n"
    ],
    "description": "function: print a banner. example: banner_simple \"my title\""
  },
  "fx_banner_simple": {
    "prefix": "fx banner simple",
    "body": "banner_simple \"${1:my title}\"\n",
    "description": "call banner_simple function"
  },
  "fn_banner_color": {
    "prefix": "fn banner color",
    "body": [
      "function banner_color() {",
      "\tlocal color=\\$1",
      "\tshift\n",
      "\tcase \\$color in",
      "\t\tblack) color=0",
      "\t\t;;",
      "\t\tred) color=1",
      "\t\t;;",
      "\t\tgreen) color=2",
      "\t\t;;",
      "\t\tyellow) color=3",
      "\t\t;;",
      "\t\tblue) color=4",
      "\t\t;;",
      "\t\tmagenta) color=5",
      "\t\t;;",
      "\t\tcyan) color=6",
      "\t\t;;",
      "\t\twhite) color=7",
      "\t\t;;",
      "\t\t*) echo \"color is not set\"; exit 1",
      "\t\t;;",
      "\tesac\n",
      "\tlocal s=(\"$@\") b w",
      "\tfor l in \"\\${s[@]}\"; do",
      "\t\t((w<${#l})) && { b=\"\\$l\"; w=\"\\${#l}\"; }",
      "\tdone",
      "\ttput setaf \\$color",
      "\techo \" =\\${b//?/=}=",
      "| \\${b//?/ } |\"",
      "\tfor l in \"\\${s[@]}\"; do",
      "\t\tprintf '| %s%*s%s |\\n' \"\\$(tput setaf \\$color)\" \"-\\$w\" \"\\$l\" \"\\$(tput setaf \\$color)\"",
      "\tdone\n",
      "\techo \"| ${b//?/ } |",
      " =${b//?/=}=\"",
      "\ttput sgr 0",
      "}\n"
    ],
    "description": "function: print a color banner. example: banner_color red \"my title\"\n"
  },
  "fx_banner_color": {
    "prefix": "fx banner color",
    "body": "banner_color ${1|black,red,green,yellow,blue,magenta,cyan,white|} \"${2:my title}\"\n",
    "description": "call banner_color function"
  },
  "fn_scan": {
    "prefix": "fn scan",
    "body": [
      "# scan proto host fromPort toPort",
      "function scan () {",
      "\tfor ((port=\\$3; port<=\\$4; port++)); do",
      "\t\t(echo >/dev/\\$1/\\$2/\\$port) >/dev/null 2>&1 && echo \"\\$1 \\$port => open\"",
      "\tdone",
      "}\n"
    ],
    "description": "Scan host's port range (tcp/udp)"
  },
  "fx_scan": {
    "prefix": "fx scan",
    "body": "scan ${1|tcp,udp|} ${2:host} ${3:fromPort} ${4: toPort}",
    "description": "call scan function to scan a host over a port range"
  }
}